[tool.pytest.ini_options]
addopts = [
    "--import-mode=prepend",
    "-v",
]
testpaths = [
    "tests",
    "fact/plugins/**/test",
]
markers = [
    "AnalysisPluginTestConfig: Configure the analysis_plugin fixture",
    "SchedulerTestConfig: Configure the analysis_scheduler, comparison_scheduler and unpacking_scheduler",
    "WebInterfaceUnitTestConfig: Configure the web_interface fixture",
    "backend_config_overwrite: Overwrite defaults for the testing backend config",
    "common_config_overwrite: Overwrite defaults for the testing common config",
    "frontend_config_overwrite: Overwrite defaults for the testing frontend config",
]

[tool.ruff]
exclude = [
    ".git",
    ".ruff_cache",
    ".venv",
    "bin",
    "node_modules",
    "docker",  # ingore plugins/*/*/docker/scripts/* jython ghidra scripts
    "venv",
    "data",  # ignore plugins/*/*/test/data/* test data folders (containing test files)
    "src/plugins/analysis/input_vectors/internal",  # FixMe: runs inside a bionic docker container with python 3.6
]
line-length = 120
target-version = "py38"

[tool.ruff.lint]
select = [
    "F",  # Pyflakes
    "E",  # pycodestyle Error
    "W",  # pycodestyle Warning
    "C90",  # mccabe
    "I",  # isort
    "N",  # pep8-naming
    "UP",  # pyupgrade
    "B",  # flake8-bugbear
    "A",  # flake8-builtins
    "C4",  # flake8-comprehensions
    "EXE",  # flake8-executable
    "FA",  # flake8-future-annotations
    "ISC",  # flake8-implicit-str-concat
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",  # flake8-pytest-style
    "Q",  # flake8-quotes
    "RET",  # flake8-return
    "SIM",  # flake8-simplify
    "TCH",  # flake8-type-checking
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8-use-pathlib
    "ERA",  # eradicate
    "PL",  # Pylint
    "PERF",  # Perflint
    "RUF",  # Ruff-specific rules
]
ignore = [
    "A003",
    "PERF203",
    "PERF401",
    "RUF001",
    "RUF002",
    "RUF003",
    "RUF015",
    # pydantic only supports these from python>=3.9
    "UP006",
    "UP007",
    # rules may cause conflicts when used with the formatter
    "ISC001",
    "Q001",
]
fixable = ["ALL"]

[tool.ruff.lint.per-file-ignores]
"test*.py" = ["ARG002"]
"conftest.py" = ["ARG002"]

[tool.ruff.lint.isort]
known-first-party = ["analysis", "compare", "helperFunctions", "install", "intercom", "objects", "plugins", "scheduler",
    "statistic", "storage", "test", "unpacker", "version", "web_interface", "config"]
known-third-party = ["docker"]

[tool.ruff.lint.pylint]
max-args=7
max-public-methods = 40

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.flake8-quotes]
inline-quotes = "single"
multiline-quotes = "single"
docstring-quotes = "double"

[tool.ruff.format]
quote-style = "single"

[tool.poetry]
name = "fact"
version = "0.1.0"
description = ""
authors = ["Marten Ringwelski <git@maringuu.de>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"

[tool.poetry.group.pre_install.dependencies]
# XXX What are these?!
# Aren't they simply dependencies of the installer?

# Python Libraries for python based installation
distro = "1.8.0"
python-magic = "0.4.27"
requests = "2.32.2"
# Needed by config.py
pydantic = "2.4.0"
werkzeug = "~3.0.3"
toml = "0.10.2"

common_helper_files = { git = "https://github.com/fkie-cad/common_helper_files.git" }



[tool.poetry.group.common.dependencies]
# General build stuff
testresources = "2.0.1"

# General python dependencies
appdirs = "1.4.4"
flaky = "3.7.0"
lief = "0.14.1"
psutil = "5.9.4"
psycopg2-binary = "2.9.9"
pylint = "2.15.5"
pytest-cov = "4.0.0"
pytest-timeout = "2.1.0"
pytest = "7.2.0"
python-magic = "0.4.27"
python-tlsh = "4.5.0"
redis = "4.5.4"
requests = "2.32.2"
rich = "12.6.0"
sqlalchemy = "~2.0.30"
ssdeep = "3.4"
xmltodict = "0.13.0"
yara-python = "4.5.0"

# Config validation
pydantic = "2.4.0"
# Config parsing
toml = "0.10.2"

fact_helper_file = { git = "https://github.com/fkie-cad/fact_helper_file.git" }

# Common code modules
common_helper_files = { git = "https://github.com/fkie-cad/common_helper_files.git" }
common_helper_filter = { git = "https://github.com/fkie-cad/common_helper_filter.git" }
common_helper_encoder = { git = "https://github.com/mass-project/common_helper_encoder.git" }

# database migration
alembic = "1.10.2"



[tool.poetry.group.frontend.dependencies]
bcrypt = "~4.1.3"
email-validator = "~2.1.1"
flask-login = "~0.6.3"
flask-paginate = "~2024.4.12"
flask-security-too = "~5.4.3"
flask-wtf = "~1.2.1"
flask = "~3.0.3"
flask-restx = "~1.3.0"
flask-sqlalchemy = "~3.1.1"
itsdangerous = "~2.2.0"
matplotlib = "~3.7.5"
more-itertools = "~10.2.0"
prompt-toolkit = "~3.0.43"
python-dateutil = "~2.9.0"
quantiphy = "~2.20"
uwsgi = "~2.0.25.1"
virtualenv = "~20.26.1"

# must be below dependent packages (flask, flask-login, flask-restx)
werkzeug = "~3.0.3"

# Used for username validation by flask-security
bleach = "~6.1.0"

# Figuring out if the analysis is outdated
semver = "~3.0.2"


[tool.poetry.group.backend.dependencies]
cryptography = "42.0.5"
docker = "~7.1.0"
MarkupSafe = "2.1.1"
networkx = "2.6.3"
Pillow = "10.3.0"
pyopenssl = "~24.1.0"
pyyaml = "6.0.1"

# FIXME This is only needed by the compare/file_header plugin
#       See Issue #832
flask = "~3.0.3"

common_helper_yara = { git = "https://github.com/fkie-cad/common_helper_yara.git" }

# For plugin definition
semver = "~3.0.2"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
